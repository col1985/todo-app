# Stage 1: Build the React application
# Use a Node.js image as the base for building the React app
FROM node:20-alpine AS builder

# Set the working directory inside the container
WORKDIR /app

# Copy package.json and package-lock.json (or yarn.lock)
# to leverage Docker cache for dependencies
COPY package*.json ./

# Install project dependencies
# Using npm install --silent for cleaner output
RUN npm install --silent

# Copy the rest of the application code
COPY . .

# Build the React application for production
# This creates the 'build' folder with static assets
RUN npm run build

# Stage 2: Serve the React application with Nginx
# Use a lightweight Nginx image to serve the static files
FROM nginx:alpine

# Copy the custom Nginx configuration file
# This configuration tells Nginx how to serve the React app (especially for routing)
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy the built React application from the 'builder' stage
# into the Nginx default web serving directory
COPY --from=builder /app/build /usr/share/nginx/html

# Expose port 80, as Nginx typically listens on this port
EXPOSE 80

# The default command to start Nginx is already set in the base image,
# so we don't need to specify CMD here unless we want to override it.
# CMD ["nginx", "-g", "daemon off;"]
